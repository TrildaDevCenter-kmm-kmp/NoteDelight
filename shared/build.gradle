plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'com.squareup.sqldelight'
    id 'com.android.library'
    id 'kotlin-android-extensions'
}
sqldelight {
    NoteDb {
        packageName = 'com.softartdev.notedelight.shared.db'
    }
}
kotlin {
    android()
    iosX64('ios') {
        binaries {
            framework {
                baseName = 'shared'
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "com.squareup.sqldelight:coroutines-extensions:$sqldelight_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                api "com.squareup.sqldelight:android-driver:$sqldelight_version"
                def sqlite_version = "2.1.0"
                implementation "androidx.sqlite:sqlite:$sqlite_version"
                implementation "androidx.sqlite:sqlite-ktx:$sqlite_version"
                implementation "androidx.sqlite:sqlite-framework:$sqlite_version"
                api "com.commonsware.cwac:saferoom.x:1.3.0"
                api 'net.zetetic:android-database-sqlcipher:4.4.0@aar'
                implementation "com.jakewharton.timber:timber:$timber_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation project(path: ':shared-android-test-util')
                implementation "junit:junit:$junit_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
                implementation "org.mockito:mockito-core:$mockito_version"
                implementation "org.mockito:mockito-inline:$mockito_version"
                implementation "com.squareup.sqldelight:sqlite-driver:$sqldelight_version"
            }
        }
        iosMain {
            dependencies {
                implementation "com.squareup.sqldelight:native-driver:$sqldelight_version"
            }
        }
        iosTest {
        }
    }
}
task(packForXcode, type: Sync) {
    group = 'build'
    def mode = System.getenv('CONFIGURATION') ?: 'DEBUG'
    def framework = kotlin.targets.ios.binaries.getFramework(mode)
    inputs.property('mode', mode)
    dependsOn(framework.linkTask)
    def targetDir = new File(buildDir, 'xcode-frameworks')
    from({ framework.outputDirectory })
    into(targetDir)
}
tasks.getByName('build').dependsOn(packForXcode)

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    }
    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        pickFirst "META-INF/AL2.0"
        pickFirst "META-INF/LGPL2.1"
    }
}
